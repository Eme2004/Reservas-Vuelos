/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;
import POJO.Vuelo;
import DAO.VueloDAO;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;
/**
 *
 * @author Emesis
 */
/**
 * Clase que representa la ventana de búsqueda de vuelos.
 * Permite mostrar todos los vuelos disponibles en una tabla.
 */
public class VentanaBusqueda extends javax.swing.JFrame {
    
    private int idUsuario;  // ID del usuario que está usando la ventana, para control o seguimiento

    /**
     * Constructor que recibe el ID de usuario, inicializa componentes y centra la ventana.
     * 
     * @param idusuario ID del usuario que utiliza la ventana
     */
    public VentanaBusqueda(int idusuario) {
        this.idUsuario = idusuario;
        initComponents();              // Inicializa componentes gráficos generados por GUI builder
        setLocationRelativeTo(null);  // Centra la ventana en la pantalla
    }

    /**
     * Método que carga todos los vuelos disponibles desde la base de datos
     * y los muestra en la tabla tblVuelos.
     */
    private void cargarVuelosEnTabla() {
        VueloDAO dao = new VueloDAO();          // Crear instancia del DAO para acceder a datos de vuelos
        List<Vuelo> lista = dao.obtenerTodos(); // Obtener lista completa de vuelos

        // Obtener el modelo de la tabla para modificar filas
        DefaultTableModel modelo = (DefaultTableModel) tblVuelos.getModel();
        modelo.setRowCount(0);                   // Limpiar tabla borrando todas las filas

        // Recorrer la lista de vuelos y agregar cada uno como fila en la tabla
        for (Vuelo v : lista) {
            modelo.addRow(new Object[]{
                v.getIdVuelo(),
                v.getAerolinea(),
                v.getOrigen(),
                v.getDestino(),
                v.getFechaSalida(),
                v.getHoraSalida(),
                v.getEscalas(), 
                v.getPrecio(),
                v.getAsientosDisponibles()
            });
        }
 }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblOrigen = new javax.swing.JLabel();
        lblDestino = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtOrigen = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        txtDestino = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVuelos = new javax.swing.JTable();
        btnRegresar = new javax.swing.JButton();
        btnHacerReserva = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        lblOrigen.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblOrigen.setText("Origen");

        lblDestino.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDestino.setText("Destino");

        lblFecha.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblFecha.setText("Fecha");

        btnBuscar.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnBuscar.setText("Buscar Vuelos");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        tblVuelos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Aerolínea", "Origen", "Destino", "Fecha Salida", "Hora Salida", "Escalas", "Precio", "Asientos Disponibles"
            }
        ));
        tblVuelos.setShowGrid(true);
        jScrollPane1.setViewportView(tblVuelos);

        btnRegresar.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnHacerReserva.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnHacerReserva.setText("Hacer Reserva");
        btnHacerReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHacerReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(180, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDestino)
                            .addComponent(lblFecha))
                        .addGap(185, 185, 185)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDestino, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFecha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(lblOrigen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(236, 236, 236))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnBuscar)
                .addGap(323, 323, 323)
                .addComponent(btnHacerReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRegresar))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrigen)
                    .addComponent(txtOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDestino)
                    .addComponent(txtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnRegresar)
                    .addComponent(btnHacerReserva))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
      // Obtener los datos ingresados por el usuario en los campos de texto
    String origen = txtOrigen.getText().trim();
    String destino = txtDestino.getText().trim();
    String fechaTexto = txtFecha.getText().trim();

    // Validar que se haya ingresado una fecha
    if (fechaTexto.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese una fecha (formato: yyyy-MM-dd).");
        return; // Salir del método si no hay fecha
    }

    LocalDate fecha;
    try {
        // Intentar convertir el texto de la fecha al objeto LocalDate
        fecha = LocalDate.parse(fechaTexto); // formato esperado: yyyy-MM-dd
    } catch (DateTimeParseException e) {
        // Si el formato es incorrecto, mostrar mensaje de error y salir
        JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Use: yyyy-MM-dd");
        return;
    }

    // Crear instancia del DAO para consultar vuelos
    VueloDAO dao = new VueloDAO();
    // Buscar vuelos que coincidan con origen, destino y fecha especificados
    List<Vuelo> lista = dao.buscarVuelos(origen, destino, fecha);

    // Obtener el modelo de la tabla para manipular los datos mostrados
    DefaultTableModel modelo = (DefaultTableModel) tblVuelos.getModel();
    modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos

    // Agregar cada vuelo encontrado como una fila en la tabla
    for (Vuelo v : lista) {
        modelo.addRow(new Object[]{
            v.getIdVuelo(),
            v.getAerolinea(),
            v.getOrigen(),
            v.getDestino(),
            v.getFechaSalida(),
            v.getHoraSalida(),
            v.getEscalas(),
            v.getPrecio(),
            v.getAsientosDisponibles()
        });
    }

    // Si no se encontraron vuelos, mostrar mensaje al usuario
    if (lista.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se encontraron vuelos con esos criterios.");
 }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
         // Acción para regresar a la ventana de reservas
    VentanaReservas reservas = new VentanaReservas(idUsuario);
    reservas.setVisible(true);  // Mostrar ventana de reservas
    this.dispose();             // Cerrar ventana actual
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnHacerReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHacerReservaActionPerformed
       // Obtener la fila seleccionada en la tabla de vuelos
    int fila = tblVuelos.getSelectedRow();
    if (fila == -1) {
        // Si no se ha seleccionado ninguna fila, mostrar alerta y salir
        JOptionPane.showMessageDialog(this, "Seleccione un vuelo.");
        return;
    }

    // Obtener el modelo de la tabla para acceder a los datos de la fila seleccionada
    DefaultTableModel modelo = (DefaultTableModel) tblVuelos.getModel();

    // Crear un objeto Vuelo y asignar los valores de la fila seleccionada
    Vuelo vuelo = new Vuelo();
    vuelo.setIdVuelo(Integer.parseInt(modelo.getValueAt(fila, 0).toString()));
    vuelo.setAerolinea(modelo.getValueAt(fila, 1).toString());
    vuelo.setOrigen(modelo.getValueAt(fila, 2).toString());
    vuelo.setDestino(modelo.getValueAt(fila, 3).toString());
    // Validar posibles valores nulos para fecha y hora y asignar como String
    String fecha = modelo.getValueAt(fila, 4) != null ? modelo.getValueAt(fila, 4).toString() : "";
    String hora = modelo.getValueAt(fila, 5) != null ? modelo.getValueAt(fila, 5).toString() : "";
    String escalasStr = modelo.getValueAt(fila, 6) != null ? modelo.getValueAt(fila, 6).toString() : "0";

    vuelo.setPrecio(Double.parseDouble(modelo.getValueAt(fila, 7).toString()));
    vuelo.setAsientosDisponibles(Integer.parseInt(modelo.getValueAt(fila, 8).toString()));

    // Crear la ventana de reserva con el vuelo seleccionado y el ID de usuario
    Reserva reserva = new Reserva(vuelo, idUsuario);
    reserva.setVisible(true);  // Mostrar ventana de reserva

    }//GEN-LAST:event_btnHacerReservaActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnHacerReserva;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDestino;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblOrigen;
    private javax.swing.JTable tblVuelos;
    private javax.swing.JTextField txtDestino;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtOrigen;
    // End of variables declaration//GEN-END:variables
}
